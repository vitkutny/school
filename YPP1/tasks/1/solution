;1st part
(equal? (/ (+ (log e) 1) (+ (sqrt 4) (/ 10 (+ -1 6)))) 0.5)
;2nd part
(define x +)
(define y 1)
(define z 2)
(define w -)
(equal? (x y z) 3)
(equal? (w y (x y y)) -1)
;3rd part
(define (pyramid d v)
  (let ((a (* (/ (sqrt 2) 2) d)))
    (* a (+ a (sqrt (+ (* 4 (sqr v)) (sqr a)))))))
(equal? (pyramid 1 1) 2.0)
;4th part
(define (my-negative? number)
  (< number 0))
(equal? (my-negative? -2) #t)
(equal? (my-negative? 4) #f)
;5th part
(define (my-proc x)
  (cond ((> x 0) (+ x 2))
        ((< x 0) (- x 2))
        (else x)))
(equal? (my-proc 1) 3)
(equal? (my-proc 0) 0)
(equal? (my-proc -1) -3)
;6th part
(define (implies a b)
  (not (and a (not b))))
(equal? (implies #f #f) #t)
(equal? (implies #f #t) #t)
(equal? (implies #t (> 2 3)) #f)
(equal? (implies (< 2 3) +) #t)
(equal? (implies cons even?) #t)
;7th part
(define (my-even number)
  (if (= (modulo number 2) 0) number #f))
(equal? (my-even 2) 2)
(equal? (my-even -4) -4)
(equal? (my-even 1) #f)
(equal? (my-even -5) #f)